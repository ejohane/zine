name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main]
    # paths:
    #   - 'packages/api/**'
    #   - 'packages/shared/**'
    #   - 'apps/web/**'
    #   - 'package.json'
    #   - 'bun.lockb'
    #   - '.github/workflows/deploy.yml'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
    # paths:
    #   - 'packages/api/**'
    #   - 'packages/shared/**'
    #   - 'apps/web/**'
    #   - 'package.json'
    #   - 'bun.lockb'
    #   - '.github/workflows/deploy.yml'

jobs:
  cleanup-preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Cleanup Preview Workers
    permissions:
      contents: read
    steps:
      - name: Set Preview Variables
        run: |
          SANITIZED_BRANCH=$(echo "${{ github.head_ref }}" | sed 's|[^a-zA-Z0-9-]|-|g')
          echo "SANITIZED_BRANCH=$SANITIZED_BRANCH" >> $GITHUB_ENV
          echo "API_PREVIEW_NAME=zine-api-$SANITIZED_BRANCH" >> $GITHUB_ENV
          echo "WEB_PREVIEW_NAME=zine-web-$SANITIZED_BRANCH" >> $GITHUB_ENV
          
      - name: Delete API Preview Worker
        continue-on-error: true
        run: |
          echo "Deleting API preview worker: ${{ env.API_PREVIEW_NAME }}"
          RESPONSE=$(curl -s -X DELETE "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/services/${{ env.API_PREVIEW_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")
          
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" = "true" ]; then
            echo "✅ API preview worker deleted successfully"
          else
            ERROR=$(echo "$RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
            echo "⚠️  Could not delete API preview worker: $ERROR"
          fi
          
      - name: Delete Web Preview Worker
        continue-on-error: true
        run: |
          echo "Deleting Web preview worker: ${{ env.WEB_PREVIEW_NAME }}"
          RESPONSE=$(curl -s -X DELETE "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/services/${{ env.WEB_PREVIEW_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")
          
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" = "true" ]; then
            echo "✅ Web preview worker deleted successfully"
          else
            ERROR=$(echo "$RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
            echo "⚠️  Could not delete Web preview worker: $ERROR"
          fi

  deploy-api:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: Deploy API
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Type check
        run: bun run type-check
        working-directory: packages/api
        
      - name: Build shared package
        run: bun run build
        working-directory: packages/shared
        
      - name: Build API
        run: bun run build
        working-directory: packages/api
        
      - name: Run database migrations (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: ./scripts/apply-migrations-safe.sh
        working-directory: packages/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Set Clerk Secret (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: echo "${{ secrets.CLERK_SECRET_KEY_PRODUCTION }}" | bunx wrangler secret put CLERK_SECRET_KEY --env production
        working-directory: packages/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: packages/api
          command: deploy --env production
          
      - name: Purge Cache (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
          
      - name: Set Preview Variables
        if: github.event_name == 'pull_request'
        run: |
          SANITIZED_BRANCH=$(echo "${{ github.head_ref }}" | sed 's|[^a-zA-Z0-9-]|-|g')
          echo "SANITIZED_BRANCH=$SANITIZED_BRANCH" >> $GITHUB_ENV
          echo "API_PREVIEW_NAME=zine-api-$SANITIZED_BRANCH" >> $GITHUB_ENV
          
      - name: Set Clerk Secret (Preview)
        if: github.event_name == 'pull_request' && github.event.pull_request.number != 108
        run: echo "${{ secrets.CLERK_SECRET_KEY_DEV }}" | bunx wrangler secret put CLERK_SECRET_KEY --name ${{ env.API_PREVIEW_NAME }}
        working-directory: packages/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy Preview
        if: github.event_name == 'pull_request' && github.event.pull_request.number != 108
        id: api_preview_deploy
        run: |
          set -e
          echo "Deploying API preview to ${{ env.API_PREVIEW_NAME }}..."
          OUTPUT=$(bunx wrangler deploy --name ${{ env.API_PREVIEW_NAME }} --config wrangler.preview.toml 2>&1) || {
            echo "::error::Deployment failed with exit code $?"
            echo "Wrangler output:"
            echo "$OUTPUT"
            exit 1
          }
          echo "Deployment output:"
          echo "$OUTPUT"
          URL=$(echo "$OUTPUT" | grep -o 'https://[^[:space:]]*\.workers\.dev[^[:space:]]*' | tail -1)
          if [ -z "$URL" ]; then
            echo "::error::Could not extract deployment URL from wrangler output"
            echo "Full wrangler output:"
            echo "$OUTPUT"
            exit 1
          fi
          echo "deployment-url=$URL" >> $GITHUB_OUTPUT
        working-directory: packages/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
      - name: Comment Preview URL
        if: github.event_name == 'pull_request' && github.event.pull_request.number != 108 && steps.api_preview_deploy.outputs.deployment-url
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = "${{ steps.api_preview_deploy.outputs.deployment-url }}";
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **API Preview Deployment Ready!**
              
              **Preview URL:** ${deploymentUrl}
              **Branch:** \`${{ github.head_ref }}\`
              **Commit:** \`${{ github.sha }}\`
              
              Test your API endpoints at: ${deploymentUrl}/api/v1/`
            })
            
  deploy-web:
    runs-on: ubuntu-latest
    name: Deploy Web App
    # Note: Web app deployment maintained for development/testing purposes only
    # Web app is not the primary platform - mobile app is the focus
    # PR previews disabled to avoid Cloudflare worker limits
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.action != 'closed')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Build shared package
        run: bun run build
        working-directory: packages/shared
        
      - name: Build design-system package
        run: bun run build
        working-directory: packages/design-system
        
      - name: Type check
        run: bun run type-check
        working-directory: apps/web
        
      - name: Build Web App (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "VITE_CLERK_PUBLISHABLE_KEY=$VITE_CLERK_PUBLISHABLE_KEY" > .env.production
          echo "Building with environment variables..."
          cat .env.production
          bunx dotenv-cli -e .env.production -- bun run build
          # Replace BUILD_TIME placeholder in wrangler.toml
          BUILD_TIME=$(date -u +%Y%m%d%H%M%S)
          sed -i "s/{{BUILD_TIME}}/$BUILD_TIME/g" wrangler.toml
        working-directory: apps/web
        env:
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY_PRODUCTION }}
          
      - name: Build Web App (Preview)
        if: github.event_name == 'pull_request'
        run: |
          echo "VITE_CLERK_PUBLISHABLE_KEY_DEV=$VITE_CLERK_PUBLISHABLE_KEY_DEV" > .env
          echo "VITE_API_URL=https://zine-api-${{ steps.branch-name.outputs.current-branch }}.zine-dev.workers.dev" >> .env
          bunx dotenv-cli -e .env -- bun run build
        working-directory: apps/web
        env:
          VITE_CLERK_PUBLISHABLE_KEY_DEV: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY_DEV }}
        
      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: apps/web
          command: deploy --env production
          
      - name: Purge Cache (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
          
      - name: Set Web Preview Variables
        if: github.event_name == 'pull_request'
        run: |
          SANITIZED_BRANCH=$(echo "${{ github.head_ref }}" | sed 's|[^a-zA-Z0-9-]|-|g')
          echo "SANITIZED_BRANCH=$SANITIZED_BRANCH" >> $GITHUB_ENV
          echo "WEB_PREVIEW_NAME=zine-web-$SANITIZED_BRANCH" >> $GITHUB_ENV
          
      - name: Deploy Preview
        if: github.event_name == 'pull_request' && github.event.pull_request.number != 108
        id: web_preview_deploy
        run: |
          set -e
          echo "Deploying web preview to ${{ env.WEB_PREVIEW_NAME }}..."
          OUTPUT=$(bunx wrangler deploy --name ${{ env.WEB_PREVIEW_NAME }} --config wrangler.preview.toml 2>&1) || {
            echo "::error::Deployment failed with exit code $?"
            echo "Wrangler output:"
            echo "$OUTPUT"
            exit 1
          }
          echo "Deployment output:"
          echo "$OUTPUT"
          URL=$(echo "$OUTPUT" | grep -o 'https://[^[:space:]]*\.workers\.dev[^[:space:]]*' | tail -1)
          if [ -z "$URL" ]; then
            echo "::error::Could not extract deployment URL from wrangler output"
            echo "Full wrangler output:"
            echo "$OUTPUT"
            exit 1
          fi
          echo "deployment-url=$URL" >> $GITHUB_OUTPUT
        working-directory: apps/web
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
      - name: Comment Preview URL
        if: github.event_name == 'pull_request' && github.event.pull_request.number != 108 && steps.web_preview_deploy.outputs.deployment-url
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = "${{ steps.web_preview_deploy.outputs.deployment-url }}";
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🌐 **Web App Preview Deployment Ready!**
              
              **Preview URL:** ${deploymentUrl}
              **Branch:** \`${{ github.head_ref }}\`
              **Commit:** \`${{ github.sha }}\`
              
              View your web app at: ${deploymentUrl}`
            })